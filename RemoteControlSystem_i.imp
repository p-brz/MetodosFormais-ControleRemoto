IMPLEMENTATION
   RemoteControlSystem_i
REFINES
   RemoteControlSystem
SEES
   TemperatureType ,
   SignalType ,
   KeyType ,
   IdentifierType ,
   ProfileIdentifierType, 
   KeysToIdentifierType, 
   KeysToSignalsType
IMPORTS TemperatureManager, 
    /*ControlConfiguration(saveProfilesLimit),*/ 
    ControlConfiguration(saveProfilesLimit), 
    ControlUserInterface, AirSignalController

VALUES
    saveProfilesLimit = 5

INVARIANT 
    /** Ligação de variáveis da máquina abstrata com variáveis de TemperatureManager*/
    currentTemperature = currentTemp
    & maxTemperature = maxTemp
    & minTemperature = minTemp
    /** Ligação de variáveis da máquina abstrata com variáveis de ControlConfiguration*/
    & keyMap = keysToSignal
    & keyName = keysToIdentifier
    & currentProfileIdent = currentProfile
    & savedProfilesSignals = profileSignals
    & savedProfilesNames = profileNames
    & defaultProfile : dom(profileSignals)
    & defaultProfile : dom(profileNames)
    & profileSignals(defaultProfile) = {}
    & profileNames(defaultProfile) = {}
    /** Ligação com máquina ControlUserInterface*/
    & temperatureView = currentTemperature
    & keyIdentifierView = nameOut
    & profileIdentView = currentProfileIdent
    /** Ligação com máquina AirSignalController*/
    & signalSended = signalOut
    /*& allowedSignals = ran(keyMap)*/
    
INITIALISATION
    VAR temp IN
        temp := (maxTemperature + minTemperature)/2;
        setTemperatures(temp, minTemperature, maxTemperature);
        showTemperature(temp)
    END;
    showKey(nullIdentifier);
    VAR loaded IN
       loaded <-- loadProfile(defaultProfile)
    END;
    showProfile(defaultProfile)

OPERATIONS
temp <-- showCurrentTemperature =
    VAR someTemp IN
       someTemp <-- getCurrentTemperature ;
       temp := someTemp       
   END;

signalWasSent <-- pressKey(key) =
    BEGIN
        IF key = incKey THEN /** Aumenta temperatura, se possivel*/
            VAR newTemp IN
                newTemp <-- getCurrentTemperature;
                newTemp := newTemp + 1;
                IF newTemp <= maxTemperature
                THEN
                    VAR success IN
                        success <-- sendTemperatureSignal(newTemp);
                        IF success = TRUE THEN
                            setCurrentTemperature(newTemp);
                            showTemperature(newTemp);
                            VAR keyIdent IN
                                keyIdent <-- getKeyIdentifier(key);
                                showKey(keyIdent)
                            END;  
                            signalWasSent := TRUE
                        ELSE
                            signalWasSent := FALSE
                        END
                        
                    END
                ELSE
                    signalWasSent := FALSE
                END
            END
        ELSIF key = decKey THEN /** Diminui temperatura, se possivel*/
            
            VAR newTemp IN
                newTemp <-- getCurrentTemperature;
                newTemp := newTemp - 1;
                IF newTemp >= minTemperature
                THEN
                    VAR success IN
                        success <-- sendTemperatureSignal(newTemp);
                        IF success = TRUE THEN
                            setCurrentTemperature(newTemp);
                            showTemperature(newTemp);
                            VAR keyIdent IN
                                keyIdent <-- getKeyIdentifier(key);
                                showKey(keyIdent)
                            END;  
                            signalWasSent := TRUE
                        ELSE
                            signalWasSent := FALSE
                        END
                        
                    END
                ELSE
                    signalWasSent := FALSE
                END
            END
        ELSE
            VAR isSpecialKey IN     
                isSpecialKey <-- isASpecialKey(key);
                IF isSpecialKey = TRUE THEN 
                    VAR keySign, isValidSign IN
                        keySign <-- getKeySignal(key);
                        isValidSign <-- isAValidSignal(keySign);
                        /** retornará nullSignal se key não possuir um signal valido*/
                        IF keySign /= nullSignal & isValidSign = TRUE THEN
                            sendSignal(keySign);
                            VAR keyIdent IN
                                keyIdent <-- getKeyIdentifier(key);
                                showKey(keyIdent);
                                signalWasSent := TRUE
                            END
                        ELSE
                            signalWasSent := FALSE
                        END
                    END
                ELSE
                    signalWasSent := FALSE
                END
            END
        END      
    END;

/** recebe sinal e grava mapeamento entre tecla e sinal*/
recorded <-- recordKeySignal( key) =
    VAR isSpecialKey IN     
        isSpecialKey <-- isASpecialKey(key);         
        IF isSpecialKey = TRUE THEN          
            VAR currentSign, newSign, changedKeySign IN
                /**inicializando variáveis - obrigatório em B*/
                changedKeySign := FALSE;
                currentSign <-- getKeySignal(key);
                /** Recebe sinal*/
                newSign <-- receiveSignal;
                IF newSign /= nullSignal THEN
                    changedKeySign <-- setKeySignal(key, newSign);
                    IF changedKeySign = TRUE THEN
                        freeSignal(currentSign);
                        recorded := TRUE
                    ELSE
                        freeSignal(newSign);
                        recorded := FALSE
                    END
                    
                ELSE
                    recorded := FALSE
                END 
            END
        ELSE
            recorded := FALSE
        END
    END;

clearKeySignal(key) =
    BEGIN
        removeKeySignal(key)
    END;
   
   
recorded <-- recordKeyIdentifier(key, ident) =
    recorded <-- setKeyIdentifier(key, ident);

clearKeyIdentifier(key) =
    removeKeyIdentifier(key);

ident <-- showKeyIdentifier ( key ) =
   ident <-- getKeyIdentifier( key );

success <-- saveCurrentProfile ( ident ) =
   VAR countProfiles IN
       countProfiles <-- profileCount;
       IF countProfiles < saveProfilesLimit 
           & ident /= nullProfileIdentifier 
           & ident /= defaultProfile
       THEN
           saveProfile(ident);
           showProfile(ident);
           success := TRUE
       ELSE
           success := FALSE
       END
   END;
         
/*success <-- loadProfileToCurrent ( profileIdent ) =
    VAR profileIsValid IN
        profileIsValid <-- containsProfile(profileIdent);
        
        IF profileIsValid = TRUE THEN
            loadProfile(profileIdent);
            showProfile(profileIdent);
            success := TRUE
        ELSE
           success := FALSE
        END
    END;*/
success <-- loadProfileToCurrent ( profileIdent ) =
    success <-- loadProfile(profileIdent);

currentProfileName <-- showCurrentProfileIdentification =
   currentProfileName <-- getCurrentProfile


END

